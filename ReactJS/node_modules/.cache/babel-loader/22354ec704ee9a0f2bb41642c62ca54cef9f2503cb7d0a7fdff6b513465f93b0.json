{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nconst useValidator = options => {\n  _s();\n  const [errors, setErrors] = useState({});\n  const validateField = (fieldName, value, formData) => {\n    const fieldRules = rules.filter(rule => rule.field === fieldName);\n    const fieldErrors = [];\n    fieldRules.forEach(rule => {\n      const error = rule.validate(value, formData);\n      if (error) {\n        fieldErrors.push(error);\n      }\n    });\n\n    // Nếu có lỗi, lưu lại vào state errors\n    if (fieldErrors.length > 0) {\n      setErrors(prev => ({\n        ...prev,\n        [fieldName]: fieldErrors.join(', ')\n      }));\n    } else {\n      setErrors(prev => {\n        const {\n          [fieldName]: omit,\n          ...rest\n        } = prev;\n        return rest;\n      });\n    }\n  };\n  const clearError = fieldName => {\n    setErrors(prev => ({\n      ...prev,\n      [fieldName]: undefined\n    }));\n  };\n  const validateAll = formData => {\n    const newErrors = {};\n    options.rules.forEach(rule => {\n      const value = formData[rule.selector];\n      const errorMessage = rule.test(value, formData);\n      if (errorMessage) {\n        newErrors[rule.selector] = errorMessage;\n      }\n    });\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  return {\n    errors,\n    validateField,\n    clearError,\n    validateAll\n  };\n};\n_s(useValidator, \"o+SUXTQUSJNurFcpxixiLrA9BM0=\");\nuseValidator.isRequired = selector => {\n  return {\n    selector,\n    test: value => {\n      return value && value.trim() ? undefined : 'Trường này là bắt buộc';\n    }\n  };\n};\nuseValidator.isPasswordMatch = (selector, compareSelector) => {\n  return {\n    selector,\n    test: (value, formData) => {\n      return value !== formData[compareSelector] ? 'Mật khẩu không khớp' : undefined;\n    }\n  };\n};\nuseValidator.minLength = (selector, minLength) => {\n  return {\n    selector,\n    test: value => {\n      return value.length >= minLength ? undefined : `Mật khẩu phải có ít nhất ${minLength} ký tự`;\n    }\n  };\n};\nuseValidator.isEmail = selector => {\n  return {\n    selector,\n    test: value => {\n      const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n      return regex.test(value) ? undefined : 'Email không hợp lệ';\n    }\n  };\n};\nexport default useValidator;","map":{"version":3,"names":["useState","useValidator","options","_s","errors","setErrors","validateField","fieldName","value","formData","fieldRules","rules","filter","rule","field","fieldErrors","forEach","error","validate","push","length","prev","join","omit","rest","clearError","undefined","validateAll","newErrors","selector","errorMessage","test","Object","keys","isRequired","trim","isPasswordMatch","compareSelector","minLength","isEmail","regex"],"sources":["D:/ReactJs/forum/src/hooks/useValidator.js"],"sourcesContent":["import { useState } from 'react';\r\n\r\nconst useValidator = (options) => {\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const validateField = (fieldName, value, formData) => {\r\n    const fieldRules = rules.filter(rule => rule.field === fieldName);\r\n    const fieldErrors = [];\r\n\r\n    fieldRules.forEach(rule => {\r\n      const error = rule.validate(value, formData);\r\n      if (error) {\r\n        fieldErrors.push(error);\r\n      }\r\n    });\r\n\r\n    // Nếu có lỗi, lưu lại vào state errors\r\n    if (fieldErrors.length > 0) {\r\n      setErrors(prev => ({ ...prev, [fieldName]: fieldErrors.join(', ') }));\r\n    } else {\r\n      setErrors(prev => {\r\n        const { [fieldName]: omit, ...rest } = prev;\r\n        return rest;\r\n      });\r\n    }\r\n  };\r\n\r\n    const clearError = (fieldName) => {\r\n        setErrors((prev) => ({\r\n            ...prev,\r\n            [fieldName]: undefined,\r\n        }));\r\n    };\r\n\r\n    const validateAll = (formData) => {\r\n        const newErrors = {};\r\n        options.rules.forEach((rule) => {\r\n            const value = formData[rule.selector];\r\n            const errorMessage = rule.test(value, formData);\r\n            if (errorMessage) {\r\n                newErrors[rule.selector] = errorMessage;\r\n            }\r\n        });\r\n\r\n        setErrors(newErrors);\r\n        return Object.keys(newErrors).length === 0;\r\n    };\r\n\r\n    return {\r\n        errors,\r\n        validateField,\r\n        clearError,\r\n        validateAll,\r\n    };\r\n};\r\n\r\nuseValidator.isRequired = (selector) => {\r\n    return {\r\n        selector,\r\n        test: (value) => {\r\n            return value && value.trim() ? undefined : 'Trường này là bắt buộc';\r\n        },\r\n    };\r\n};\r\n\r\nuseValidator.isPasswordMatch = (selector, compareSelector) => {\r\n    return {\r\n        selector,\r\n        test: (value, formData) => {\r\n            return value !== formData[compareSelector] ? 'Mật khẩu không khớp' : undefined;\r\n        },\r\n    };\r\n};\r\n\r\nuseValidator.minLength = (selector, minLength) => {\r\n    return {\r\n        selector,\r\n        test: (value) => {\r\n            return value.length >= minLength ? undefined : `Mật khẩu phải có ít nhất ${minLength} ký tự`;\r\n        },\r\n    };\r\n};\r\n\r\nuseValidator.isEmail = (selector) => {\r\n    return {\r\n        selector,\r\n        test: (value) => {\r\n            const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n            return regex.test(value) ? undefined : 'Email không hợp lệ';\r\n        },\r\n    };\r\n};\r\n\r\nexport default useValidator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}